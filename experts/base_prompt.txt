API Spec:

point_location_expert(name: str) -> GeoPatch:) -> GeoPatch:
Finds the geographic location of any place on the map by its name.

Parameters
----------
    name (str): Name of the place for which the geo-location has to be found.

Returns
-------
    GeoPatch: Geographical patch with the location and boundary of the place.

patch_location_expert(name: str) -> GeoPatch:) -> GeoPatch:
Finds the geographic location and boundary polygon of any place on the map by its name.

Parameters
----------
    name (str): Name of the place for which the geo location has to be found

Returns
-------
    GeoPatch: GeoPatch containing the location and boundary path of the found place.

humidity_expert(patch: GeoPatch, mode: str = 'patch') -> U, mode: str = 'patch') -> Union[GeoPatch, Tuple[float,) -> Union[GeoPatch, Tuple[float, GeoPatch]]:
Retrieves humidity (%) values throughout a geographical patch as raster data, or at the central location of a patch based on mode.

Parameters
----------
    patch (GeoPatch): Geographical patch for which the humidity is to be retrieved.
    mode (str): Possible values: ['patch', 'point']. To specify whether to retrieve humidity data for the entire patch or a single point.

Returns
-------
    GeoPatch: patch with average precipitation in ml as raster data. (if mode == 'patch')
    float, GeoPatch: value of the humidity and the GeoPatch with a data point added for visualization, with the humidity value (if mode == 'point')

precipitation_expert(patch: GeoPatch, mode: str = 'patch') -> Union[, mode: str = 'patch') -> Union[GeoPatch, Tuple[float, GeoP) -> Union[GeoPatch, Tuple[float, GeoPatch]]:
Retrieves precipitation values in mm throughout a geographical patch as raster data, or at the central location of a patch based on mode.

Parameters
----------
    patch (GeoPatch): Geographical patch for which the precipitation is to be retrieved.
    mode (str): Possible values: ['patch', 'point']. To specify whether to retrieve precipitation data for the entire patch or a single point.

Returns
-------
    GeoPatch: patch with precipitation as raster data.
    float, GeoPatch: value of the precipitation and the GeoPatch with a data point added for visualization, with the precipitation value (if mode == 'point')

temperature_expert(patch: GeoPatch, mode: str = 'patch') -> Unio, mode: str = 'patch') -> Union[GeoPatch, Tuple[float, Ge) -> Union[GeoPatch, Tuple[float, GeoPatch]]:
Retrieves temperature values (Celcius) throughout a geographical patch as raster data, or at the central location of a patch based on mode.

Parameters
----------
    patch (GeoPatch): Geographical patch for which the temperature is to be retrieved.
    mode (str): Possible values: ['patch', 'point']. To specify whether to retrieve temperature data for the entire patch or a single point.

Returns
-------
    GeoPatch: patch with temperature as raster data.
    float, GeoPatch: value of the temperature and the GeoPatch with a data point added for visualization, with the temperature value (if mode == 'point')

air_quality_expert(patch: GeoPatch, parameter: str = 'pm2_5', mo, parameter: str = 'pm2_5', mode: str = 'patch') -> Union[GeoPatch,, mode: str = 'patch') -> Union[GeoPatch, Tuple[float, GeoPatch]]:) -> Union[GeoPatch, Tuple[float, GeoPatch]]:
Retrieves a particular air quality parameter throughout a geographical patch as raster data, or at the central location of a patch based on mode.

Parameters
----------
    patch (GeoPatch): Geographical patch for which the air quality index is to be evaluated. patch has latitude and longitude information.
    parameter (str): The air quality parameter to be retrieved. Possible values: ['co', 'no2', 'o3', 'so2', 'pm2_5', 'pm10', 'us-epa-index']
    mode (str): Possible values: ['patch', 'point']. To specify whether to retrieve air quality data for the entire patch or a single point.

Returns
-------
    GeoPatch: patch with the chosen air quality parameter plotted as raster data accessible as GeoPatch.raster_data['data'] (if mode == 'patch')
    float, GeoPatch: value of the air quality parameter and the GeoPatch with a data point added for visualization, with the air quality parameter value (if mode == 'point')

elevation_expert(patch: GeoPatch, mode: str = 'patch') -> Un, mode: str = 'patch') -> Union[GeoPatch, Tuple[float,) -> Union[GeoPatch, Tuple[float, GeoPatch]]:
Retrieves elevation values throughout a geographical patch as raster data, or at the central location of a patch based on mode.

Parameters
----------
    patch (GeoPatch): Geographical patch for which the elevation is to be retrieved.
    mode (str): Possible values: ['patch', 'point']. To specify whether to retrieve elevation data for the entire patch or a single point.

Returns
-------
    GeoPatch: patch with elevation (m) as raster data. (if mode == 'patch')
    float, GeoPatch: value of the elevation and the GeoPatch with a data point added for visualization, with the elevation value (if mode == 'point')

imputation_expert(patch: GeoPatch) -> GeoPatch:) -> GeoPatch:
Impute missing values in a patch using interpolation.

Parameters
----------
    patch (GeoPatch): Input patch with missing values represented as NaN.

Returns
-------
    GeoPatch: Patch with missing values imputed.

correlation_expert(patch1: GeoPatch, patch2: GeoPatch) -> float:, patch2: GeoPatch) -> float:) -> float:
Cross-correlate the raster data within two input patches.

Parameters
----------
    patch1 (GeoPatch): First patch.
    patch2 (GeoPatch): Second patch.

Returns
-------
    float: Value of correlation between the raster data in patch1 and patch2

data_to_text_expert(data: any) -> str:) -> str:
Computes the string representation for any input data.

Parameters
----------
    data (any): Input data which is to be represented as a string.

Returns
-------
    str: String representation of the input data.

threshold_expert(patch: GeoPatch, threshold: float, mode: st, threshold: float, mode: str = 'greater', relative=True) -> GeoPat, mode: str = 'greater', relative=True) -> GeoPatch:, relative: Any) -> GeoPatch:
Threshold the raster data within a GeoPatch by a percent threshold.

Parameters
----------
    patch (GeoPatch): A GeoPatch whose raster data is to be thresholded.
    threshold (float): Value between 0.0 and 1.0, the percent threshold.
    mode (str): ('greater', 'less') Mode specifying the truth of a pixel value when compared to the threshold.
    relative (bool): Whether to use a percent or absolute threshold.

Returns
-------
    GeoPatch: Patch with thresholded raster data, RasterType of the GeoPatch.raster_data changes to RasterType.binary

intersection_expert(patch1: GeoPatch, patch2: GeoPatch, mode='raster, patch2: GeoPatch, mode='raster') -> GeoPatch:, mode: Any) -> GeoPatch:
Perform intersection between the vector or raster data within two geographical patches. 
If raster intersection is to be performed, both patches should have RasterType.binary and cover identical geographical regions.

Parameters
----------
    patch1 (GeoPatch): First patch
    patch2 (GeoPatch): Second patch
    mode (str): Intersection mode, either 'vector' or 'raster'

Returns
-------
    GeoPatch: with required intersection present within vector or raster data.

patch_visualization_expert(patch: GeoPatch) -> None:) -> None:
Visualize the vector and raster data within GeoPatch on a map

Parameters
----------
    patch (Union[GeoPatch, None]): A GeoPatch with vector/raster data to be visualized.

Returns
-------
    None

elaborate_expert(question: str, answer: str, context: List[st, answer: str, context: List[str] = None) -> str:, context: List[str] = None) -> str:) -> str:
Impute missing values in a patch using interpolation.

Parameters
----------
    question (str): The query that was asked by the user
    answer (str): The final answer obtained as a result of code generation and execution
    context (List[str]): Any intermediate results obtained during code execution, important for explaining the thought process behind the query solution

Returns
-------
    str: Elaborate answer explaining the computation steps and final answer

