API Spec:

class GeoPatch:
    """
    Primary class representing a geospatial patch with vector/raster data.

    Attributes
    ----------
    type: PatchType
        Type of geographical patch based on the data it contains.
    raster_data: dict
        Stores raster data and related information.
        - 'name' (str): Name of the raster data stored.
        - 'type' (RasterType): Type of raster data stored, whether color, non_color, or binary.
        - 'colormap' (str): String representing a color name (optional).
        - 'data' (np.ndarray): NumPy array containing the raster data.
    vector_data: dict
        Stores vector data and related information.
        - 'location' ([float, float]): Latitude and longitude of the location that the patch represents (mandatory).
        - 'bbox' (List[float]): Bounding box coordinates of the boundary of the patch [min_lat, max_lat, min_lon, max_lon] (mandatory).
        - 'points' (List[DataPoint]): Data points corresponding to the patch, displayed on the map (optional).
        - 'boundary' (List[shapely.geometry.Polygon]): Boundary polygon of the patch (mandatory).

    Methods
    ---------
    get_raster_data()->Dict
        Returns the raster_data present in the GeoPatch object
    set_raster_data(property: raster_data)->None 
        Sets the given raster_data property into the GeoPatch object. returns nothing.
    set_raster_data_from_points(option_list: List[List[float]], name=None,type=None, colormap='gray')->None
        sets the raster data for a list of list of points.
    sample_random_points(num_points: int=10)->List
        sets the random num_points of latitiude and longitude in the given bounding box.
        Returns random points as a List.
    get_vector_data()->Dict
        gets the vector data from the object as Dictionary
    set_vector_data(property: vector_data)->None
        sets the given vector data into the object
    get_boundary(boundary: List[Polygon])->None
        gets the boundary box as List of Polygon data
    get_bbox()->List[float]
        gets the bounding box as List of floats
    set_bbox(bbox: List[float])->None
        sets the bounding box from the input List of floats
    get_location()->List[float]
        gets the location coordinates as list of floats
    set_location(location: List[float])->None
        sets the location from the list of floats
    """
    def __init__(
            self, 
            type: PatchType,
            raster_data: Union[Image.Image, np.ndarray] = None, 
            vector_data: Dict = None) -> None:
        """
        Initialize a GeoPatch instance.
        
        Parameters
        ----------
        type : PatchType
            Type of the geographical patch.
        raster_data : Union[Image.Image, np.ndarray], optional
            Raster data and related information.
        vector_data : Dict, optional
            Vector data and related information.
        """
        self.type = type
        self.raster_data = raster_data
        self.vector_data = vector_data

    def get_raster_data(self) -> Dict:
        """
        Get the raster data stored in the GeoPatch.
        
        Returns
        -------
        Dict
            Raster data and related information.
        """
        Examples
        --------
        >>> # return the foo 
        >>> 
        
        if self.raster_data is not None:
        return self.raster_data

    def set_raster_data(self, raster_data: Dict) -> None:
        """
        Set the raster data for the GeoPatch.
        
        Parameters
        ----------
        raster_data : Dict
            Raster data and related information.
        """
        self.raster_data = raster_data

    def set_raster_data_from_points(self, points: List[List[float]], name=None, type=None, colormap='gray') -> None:
        """
        Set the raster data from a list of points.
        
        Parameters
        ----------
        points : List[List[float]]
            List of points.
        name : str, optional
            Name of the raster data.
        type : RasterType, optional
            Type of the raster data.
        colormap : str, optional
            Colormap for the raster data.
        """
        # Method implementation goes here

    def sample_random_points(self, num_points: int = 10) -> List:
        """
        Sample random points within the patch's bounding box.
        
        Parameters
        ----------
        num_points : int, optional
            Number of points to sample (default is 10).
        
        Returns
        -------
        List
            List of randomly sampled points.
        """
        # Method implementation goes here

    def get_vector_data(self) -> Dict:
        """
        Get the vector data stored in the GeoPatch.
        
        Returns
        -------
        Dict
            Vector data and related information.
        """
        return self.vector_data
    
    def set_vector_data(self, vector_data) -> None:
        """
        Set the vector data for the GeoPatch.
        
        Parameters
        ----------
        vector_data : Dict
            Vector data and related information.
        """
        self.vector_data = vector_data

    def get_boundary(self) -> List[Polygon]:
        """
        Get the boundary polygon of the patch.
        
        Returns
        -------
        List[Polygon]
            List of polygons representing the boundary.
        """
        return self.vector_data['boundary']

    def set_boundary(self, boundary: List[Polygon]) -> None:
        """
        Set the boundary polygon of the patch.
        
        Parameters
        ----------
        boundary : List[Polygon]
            List of polygons representing the boundary.
        """
        self.vector_data['boundary'] = boundary

    def get_bbox(self) -> List[float]:
        """
        Get the bounding box coordinates of the patch.
        
        Returns
        -------
        List[float]
            Bounding box coordinates [min_lat, max_lat, min_lon, max_lon].
        """
        if 'bbox' in self.vector_data:
            return self.vector_data['bbox']
        
    def set_bbox(self, bbox: List[float]) -> None:
        """
        Set the bounding box coordinates of the patch.
        
        Parameters
        ----------
        bbox : List[float]
            Bounding box coordinates [min_lat, max_lat, min_lon, max_lon].
        """
        self.vector_data['bbox'] = bbox

    def get_location(self) -> List[float]:
        """
        Get the latitude and longitude of the patch.
        
        Returns
        -------
        List[float]
            Latitude and longitude.
        """
        if 'location' in self.vector_data:
            return self.vector_data['location']
        return None
    
    def set_location(self, location: List[float]) -> None:
        """
        Set the latitude and longitude of the patch.
        
        Parameters
        ----------
        location : List[float]
            Latitude and longitude.
        """
        self.vector_data['location'] = location

    def __str__(self):
        """
        Return a string representation of the GeoPatch object.
        
        Returns
        -------
        str
            String representation.
        """
        return f"GeoPatch(\n\ttype = {self.type},\n\traster_data = {pformat(self.raster_data, indent=2)},\n\tvector_data = {pformat(self.vector_data, indent=2)}\n)"


point_location_expert(name)
Finds the geographic location of any place on the map by its name.

Parameters
----------
    name (str): Name of the place for which the geo location has to be found

Returns:
    (lat, lon): Latitude and longitude of the location found.

patch_location_expert(name)
Finds the geographic location and boundary polygon of any place on the map by its name.

Parameters
----------
    name (str): Name of the place for which the geo location has to be found

Returns:
    GeoPatch: GeoPatch containing the location and boundary path of the found place.

humidity_expert(patch, mode)
Retrieves humidity (%) values throughout a geographical patch as raster data, or at the central location of a patch based on mode.

Parameters
----------
    patch (GeoPatch): Geographical patch for which the humidity is to be retrieved.
    mode (str): Possible values: ['patch', 'point']. To specify whether to retrieve humidity data for the entire patch or a single point.

Returns:
    GeoPatch: patch with average precipitation in ml as raster data. (if mode == 'patch')
    float, GeoPatch: value of the humidity and the GeoPatch with a data point added for visualization, with the humidity value (if mode == 'point')

precipitation_expert(patch, mode)
Retrieves precipitation values in mm throughout a geographical patch as raster data, or at the central location of a patch based on mode.

Parameters
----------
    patch (GeoPatch): Geographical patch for which the precipitation is to be retrieved.
    mode (str): Possible values: ['patch', 'point']. To specify whether to retrieve precipitation data for the entire patch or a single point.

Returns:
    GeoPatch: patch with precipitation as raster data.
    float, GeoPatch: value of the precipitation and the GeoPatch with a data point added for visualization, with the precipitation value (if mode == 'point')

temperature_expert(patch, mode)
Retrieves temperature values (Celcius) throughout a geographical patch as raster data, or at the central location of a patch based on mode.

Parameters
----------
    patch (GeoPatch): Geographical patch for which the temperature is to be retrieved.
    mode (str): Possible values: ['patch', 'point']. To specify whether to retrieve temperature data for the entire patch or a single point.

Returns:
    GeoPatch: patch with temperature as raster data.
    float, GeoPatch: value of the temperature and the GeoPatch with a data point added for visualization, with the temperature value (if mode == 'point')

air_quality_expert(patch, parameter, mode)
Retrieves a particular air quality parameter throughout a geographical patch as raster data, or at the central location of a patch based on mode.

Parameters
----------
    patch (GeoPatch): Geographical patch for which the air quality index is to be evaluated. patch has latitude and longitude information.
    parameter (str): The air quality parameter to be retrieved. Possible values: ['co', 'no2', 'o3', 'so2', 'pm2_5', 'pm10', 'us-epa-index']
    mode (str): Possible values: ['patch', 'point']. To specify whether to retrieve air quality data for the entire patch or a single point.

Returns:
    GeoPatch: patch with the chosen air quality parameter plotted as raster data accessible as GeoPatch.raster_data['data'] (if mode == 'patch')
    float, GeoPatch: value of the air quality parameter and the GeoPatch with a data point added for visualization, with the air quality parameter value (if mode == 'point')

elevation_expert(patch, mode)
Retrieves elevation values throughout a geographical patch as raster data, or at the central location of a patch based on mode.

Parameters
----------
    patch (GeoPatch): Geographical patch for which the elevation is to be retrieved.
    mode (str): Possible values: ['patch', 'point']. To specify whether to retrieve elevation data for the entire patch or a single point.

Returns:
    GeoPatch: patch with elevation (m) as raster data. (if mode == 'patch')
    float, GeoPatch: value of the elevation and the GeoPatch with a data point added for visualization, with the elevation value (if mode == 'point')

imputation_expert(patch)
Impute missing values in a patch using interpolation.

Parameters
----------
    patch (GeoPatch): Input patch with missing values represented as NaN.

Returns:
    GeoPatch: Patch with missing values imputed.

correlation_expert(patch1, patch2)
Cross-correlate the raster data within two input patches.

Parameters
----------
    patch1 (GeoPatch): First patch.
    patch2 (GeoPatch): Second patch.

Returns:
    float: Value of correlation between the raster data in patch1 and patch2

data_to_text_expert(data)
Computes the string representation for any input data.

Parameters
----------
    data (any): Input data which is to be represented as a string.

Returns:
    str: String representation of the input data.

patch_visualization_expert(patch)
Visualize the vector and raster data within GeoPatch on a map. Use for showcasing final results.

Parameters
----------
    patch (Union[GeoPatch, None]): A GeoPatch with vector/raster data to be visualized.

Returns:
    None

threshold_expert(patch, threshold, mode, relative)
Threshold the raster data within a GeoPatch by a percent threshold.

Parameters
----------
    patch (GeoPatch): A GeoPatch whose raster data is to be thresholded.
    threshold (float): Value between 0.0 and 1.0, the percent threshold.
    mode (str): ('greater', 'less') Mode specifying the truth of a pixel value when compared to the threshold.
    relative (bool): Whether to use a percent or absolute threshold.

Returns:
    GeoPatch: Patch with thresholded raster data, RasterType of the GeoPatch.raster_data changes to RasterType.binary

intersection_expert(patch1, patch2, mode)
Perform intersection between the vector or raster data within two geographical patches. 
If raster intersection is to be performed, both patches should have RasterType.binary and cover identical geographical regions.

Parameters
----------
    patch1 (GeoPatch): First patch
    patch2 (GeoPatch): Second patch
    mode (str): Intersection mode, either 'vector' or 'raster'

Returns:
    GeoPatch: with required intersection present within vector or raster data.

elaborate_expert(question, answer, context)
Impute missing values in a patch using interpolation.

Parameters
----------
    question (str): The query that was asked by the user
    answer (str): The final answer obtained as a result of code generation and execution
    context (): Any intermediate results obtained during code execution, important for explaining the thought process behind the query solution

Returns:
    str: Elaborate answer explaining the computation steps and final answer

