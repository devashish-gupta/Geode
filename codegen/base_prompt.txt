# API specification:

# helper classes
class RasterType(Enum):
    '''
    Enum representing the type of raster data stored in a patch.
    '''
    color = 0
    non_color = 1
    binary = 2

class DataPoint():
    '''
    Represents the data associated a particular point marker on the map.
    
    Attributes
    ----------
    point (shapely.geometry.Point): Stores the latitude and longitude of the data point in x and y.
    name (str): Name of the point, displayed within the tooltip on the map
    data (float): Any numerical value which can represent quanities like temperature, humidity etc.
    '''
    def __init__(self, x, y, name: str, data: float = None):
        self.point = Point(x, y)
        self.name = name
        self.data = data

# main class
class GeoPatch():
    '''
    Primary class representing a geospatial patch with vector/raster data.

    Attributes
    ----------
    raster_data: dict
        Stores raster data and related information.
        - 'name' (str): Name of the raster data stored. (mandatory)
        - 'type' (RasterType): Type of raster data stored, whether RasterType.color, RasterType.non_color, or RasterType.binary (mandatory)
        - 'colormap' (str): String representing a color name. (optional)
        - 'data' (np.ndarray): NumPy array containing the raster data. (mandatory)
    vector_data: dict
        Stores vector data and related information.
        - 'location' ([float, float]): Latitude and longitude of the location that the patch represents (mandatory).
        - 'bbox' (List[float]): Bounding box coordinates of the boundary of the patch [min_lat, max_lat, min_lon, max_lon] (mandatory).
        - 'points' (List[DataPoint]): Data points corresponding to the patch, displayed on the map (optional).
        - 'boundary' (List[shapely.geometry.Polygon]): Boundary polygon of the patch (mandatory).

    Methods
    -------
    get_raster_data() -> Dict
        Returns the raster_data present in the GeoPatch object
    set_raster_data(property: raster_data) -> None 
        Sets the given raster_data property into the GeoPatch object.
    set_raster_data_from_points(option_list: List[List[float]], name=None, type=None, colormap='gray') -> None
        sets the raster data for a list of list of points.
    get_vector_data() -> Dict
        gets the vector data from the object as Dictionary
    set_vector_data(property: vector_data) -> None
        sets the given vector data into the object
    get_boundary(boundary: List[Polygon]) -> None
        gets the boundary box as List of Polygon data
    get_bbox() -> List[float]
        gets the bounding box as List of floats
    get_location() -> List[float]
        Gets the location latitude and longitude as a list of floats

    '''
    def __init__(
            self, 
            raster_data: Union[Image.Image, np.ndarray] = None, 
            vector_data: Dict = None) -> None:
        '''
        Initialize a GeoPatch instance.
        
        Parameters
        ----------
        raster_data (Union[Image.Image, np.ndarray]): Raster data and related information (optional)
        vector_data (Dict): Vector data and related information (optional)
        '''
        self.raster_data = raster_data
        self.vector_data = vector_data

    def get_raster_data(self) -> Dict:
        '''
        Get the raster data stored in the GeoPatch.
        
        Returns
        -------
        Dict: Raster data and related information.
        ''' 
        if self.raster_data is not None:
            return self.raster_data

    def set_raster_data(self, raster_data: Dict) -> None:
        '''
        Set the raster data for the GeoPatch.
        
        Parameters
        ----------
        raster_data (Dict): Raster data and related information.
        '''
        self.raster_data = raster_data

    def set_raster_data_from_points(self, points: List[List[float]], name=None, type=None, colormap='gray') -> None:
        '''
        Sets the raster data across the patch from a list of points
        
        Parameters
        ----------
        points (List[List[float]]): List of points of the form [[lat0, lon0, value0], ...]
        name (str): Name of the raster data (optional)
        type (RasterType): Type of the raster data. Possible values: [RasterType.color, RasterType.non_color, RasterType.binary] (optional)
        colormap (str): Colormap for the raster data.
        '''

    def get_vector_data(self) -> Dict:
        '''
        Get the vector data stored in the GeoPatch, potentially containing 'points', 'boundary', 'location', 'bbox'.
        
        Returns
        -------
        Dict: Vector data and related information.
        '''
        return self.vector_data
    
    def set_vector_data(self, vector_data) -> None:
        '''
        Set the vector data for the GeoPatch. Mandatory keys must be present.
        
        Parameters
        ----------
        vector_data (Dict): Vector data and related information.
        '''
        self.vector_data = vector_data

    def get_boundary_polygons(self) -> List[Polygon]:
        '''
        Get a list of boundary polygons of the geographic location represented by the patch.
        
        Returns
        -------
        List[Polygon]: List of shapely.geometry.Polygon representing the boundary
        '''
        return self.vector_data['boundary']

    def get_area(self) -> float:
        '''
        Gets boundary area for the patch in million sq km.

        Returns
        -------
        float: Area of the patch in million sq km.
        '''

    def get_bbox(self) -> List[float]:
        '''
        Get the bounding box coordinates of the patch.
        
        Returns
        -------
        List[float]: Bounding box coordinates, format: [min_lat, max_lat, min_lon, max_lon]
        '''
        if 'bbox' in self.vector_data:
            return self.vector_data['bbox']

    def get_location(self) -> List[float]:
        '''
        Get the latitude and longitude of the patch.
        
        Returns
        -------
        List[float]: Latitude and longitude.
        '''
        if 'location' in self.vector_data:
            return self.vector_data['location']
        return None

    def get_data_points(self) -> List[DataPoint]:
        '''
        Get the data points associated with the locations within the patch.

        Returns
        -------
        List[DataPoint]: list of data points containing latitude, longitude, name and data.
        '''
    
    
# Here are all the geospatial experts you have access to as API calls:
def point_location_expert(name: str) -> GeoPatch:
    '''
    Finds the geographic location of any place on the map by its name.

    Parameters
    ----------
        name (str): Name of the place for which the geo-location has to be found.

    Returns
    -------
        GeoPatch: Geographical patch with the location and boundary of the place.
    '''

def patch_location_expert(name: str) -> GeoPatch:
    '''
    Finds the geographic location and boundary polygon of any place on the map by its name.

    Parameters
    ----------
        name (str): Name of the place for which the geo location has to be found

    Returns
    -------
        GeoPatch: GeoPatch containing the location and boundary path of the found place.
    '''

def imputation_expert(patch: GeoPatch) -> GeoPatch:
    '''
    Impute missing values in a patch using interpolation.

    Parameters
    ----------
        patch (GeoPatch): Input patch with missing values within patch.raster_data['data'] represented as NaN.

    Returns
    -------
        GeoPatch: Patch with missing values imputed.
    '''

def correlation_expert(patch1: GeoPatch, patch2: GeoPatch) -> float:
    '''
    Cross-correlate the raster data within two input patches.

    Parameters
    ----------
        patch1 (GeoPatch): First patch.
        patch2 (GeoPatch): Second patch.

    Returns
    -------
        float: Value of correlation between the raster data in patch1 and patch2
    '''

def data_to_text_expert(data: any) -> str:
    '''
    Computes the string representation for any input data.

    Parameters
    ----------
        data (any): Input data which is to be represented as a string.

    Returns
    -------
        str: String representation of the input data.
    '''

def threshold_expert(patch: GeoPatch, threshold: float, mode: str = 'greater', relative: bool = True) -> GeoPatch:
    '''
    Threshold the raster data within a GeoPatch by a percent or absolute threshold.

    Parameters
    ----------
        patch (GeoPatch): A GeoPatch whose raster data is to be thresholded.
        threshold (float): Value between 0.0 and 1.0, the percent threshold.
        mode (str): Possible values: ['greater', 'less']. Mode specifying the truth of a pixel value when compared to the threshold.
        relative (bool): Whether to use a percent or absolute threshold.

    Returns
    -------
        GeoPatch: Patch with thresholded raster data, RasterType of the GeoPatch.raster_data changes to RasterType.binary
    '''

def intersection_expert(patch1: GeoPatch, patch2: GeoPatch, mode: str = 'raster') -> GeoPatch:
    '''
    Perform intersection between the vector or raster data within two geographical patches. 
    If raster intersection is to be performed, both patches should have RasterType.binary and cover identical geographical regions.

    Parameters
    ----------
        patch1 (GeoPatch): First patch
        patch2 (GeoPatch): Second patch
        mode (str): Intersection mode, Possible values: ['vector', 'raster']

    Returns
    -------
        GeoPatch: with required intersection present within vector or raster data.
    '''

def humidity_expert(patch: GeoPatch, mode: str = 'patch') -> GeoPatch:
    '''
    Retrieves humidity (%) values throughout a geographical patch as raster data, or at the central location of a patch based on mode.

    Parameters
    ----------
        patch (GeoPatch): Geographical patch for which the humidity is to be retrieved.
        mode (str): Possible values: ['patch', 'point']. To specify whether to retrieve humidity data for the entire patch or a single point.

    Returns
    -------
        GeoPatch: patch with percent humidity as raster data, if mode == 'patch' 
            or else patch with patch.vector_data['points'][0].data as the humidity value, if mode == 'point'
    '''

def precipitation_expert(patch: GeoPatch, mode: str = 'patch') -> GeoPatch:
    '''
    Retrieves precipitation values in mm throughout a geographical patch as raster data, or at the central location of a patch based on mode.

    Parameters
    ----------
        patch (GeoPatch): Geographical patch for which the precipitation is to be retrieved.
        mode (str): Possible values: ['patch', 'point']. To specify whether to retrieve precipitation data for the entire patch or a single point.

    Returns
    -------
        GeoPatch: patch with precipitation (mm) as raster data, if mode == 'patch' 
            or else patch with patch.vector_data['points'][0].data as the precipitation value, if mode == 'point'
    '''

def temperature_expert(patch: GeoPatch, mode: str = 'patch') -> GeoPatch:
    '''
    Retrieves temperature values (Celcius) throughout a geographical patch as raster data, or at the central location of a patch based on mode.

    Parameters
    ----------
        patch (GeoPatch): Geographical patch for which the temperature is to be retrieved.
        mode (str): Possible values: ['patch', 'point']. To specify whether to retrieve temperature data for the entire patch or a single point.

    Returns
    -------
        GeoPatch: patch with temperature as raster data, if mode == 'patch' 
            or else patch with patch.vector_data['points'][0].data as the temperature value, if mode == 'point'
    '''

def air_quality_expert(patch: GeoPatch, parameter: str = 'pm2_5', mode: str = 'patch') -> GeoPatch:
    '''
    Retrieves a particular air quality parameter throughout a geographical patch as raster data, or at the central location of a patch based on mode.

    Parameters
    ----------
        patch (GeoPatch): Geographical patch for which the air quality index is to be evaluated. patch has latitude and longitude information.
        parameter (str): The air quality parameter to be retrieved. Possible values: ['co', 'no2', 'o3', 'so2', 'pm2_5', 'pm10', 'us-epa-index']
        mode (str): Possible values: ['patch', 'point']. To specify whether to retrieve air quality data for the entire patch or a single point.

    Returns
    -------
        GeoPatch: patch with the chosen air quality parameter plotted as raster data accessible as GeoPatch.raster_data['data'], if mode == 'patch'
            or else patch with patch.vector_data['points'][0].data as the air quality parameter value, if mode == 'point'
    '''
    param_info = {
        'co': ('Carbon Monoxide (μg/m3)', 'Greys'),
        'no2': ('Nitrogen dioxide (μg/m3)', 'Oranges'),
        'o3': ('Ozone (μg/m3)', 'Blues'),
        'so2': ('Sulfur Dioxide (μg/m3)', 'YlOrBr'),
        'pm2_5': ('PM2.5 (μg/m3)', 'magma'),
        'pm10': ('PM10 (μg/m3)', 'magma'),
        'us-epa-index': ('US - EPA Index', 'magma')
    }

def elevation_expert(patch: GeoPatch, mode: str = 'patch') -> GeoPatch:
    '''
    Retrieves elevation values throughout a geographical patch as raster data, or at the central location of a patch based on mode.

    Parameters
    ----------
        patch (GeoPatch): Geographical patch for which the elevation is to be retrieved.
        mode (str): Possible values: ['patch', 'point']. To specify whether to retrieve elevation data for the entire patch or a single point.

    Returns
    -------
        GeoPatch: patch with elevation (m) as raster data, if mode == 'patch'
            or else patch with patch.vector_data['points'][0].data as the temperature value, if mode == 'point'
    '''

# Instructions:
You are a powerful code generation model which can solve geospatial queries using the experts you have access to. 
Please write an implementation for a function 'compute_answer' using the expert API calls and classes you have access to, such that the answer to the query is obtained and returned:

# Query:
QUERY_TAG

# Your output should be exactly in this format and should not include any text before or after:
def compute_answer(query: str):
    # implementation using expert API calls here

    # returning a textual answer to the query and the most salient GeoPatch object to be used for visualization of the answer on a map
    return answer, patch 
result = compute_answer(query) # make sure you call the compute_answer function at the end and store the output in a variable called result


