import streamlit as st
import random # temporary

# importing experts
import os, sys
geode_dir = os.path.abspath(os.curdir)
if geode_dir not in sys.path:
    sys.path.append(geode_dir)

from experts.functional_experts import *
from experts.model_experts import *  
from experts.database_experts import *  
from style import *


st.set_page_config(page_title="Geode", layout="wide", page_icon="ðŸª¨")

# setting up session states
if 'generated_code' not in st.session_state:
    st.session_state['generated_code'] = [{'content': '# No code generated yet'}]
if 'messages' not in st.session_state:
    st.session_state['messages'] = [{'role': 'assistant', 'content': 'Ask me anything geospatial!'}]
st.session_state.latest_query = ''


# global styling
st.markdown(global_style_string, unsafe_allow_html=True)

def execute_code(code, trials=3):
    '''
    Function to execute code generated by the code gen model.
    '''
    tries = 0
    while tries < trials:
        try:
            ans, out_patch = exec(code) # TODO figure out observer injection
            break
        except:
            tries += 1
    return ans, out_patch

def reset_chat():
    '''
    Function to clear chat history and start a new conversation
    '''
    for key in st.session_state.keys():
        del st.session_state[key]

    # reset session with code gen model
        # todo


def main():
    '''
    Main layout for the Geode app
    '''
    left_col, right_col = st.columns([3, 2])

    with left_col:
        st.markdown("### __Geode__")

        # conversation area
        conversation = st.container(height=520)
        for answer in st.session_state.messages:
            conversation.chat_message(answer["role"], avatar='ðŸª¨' if answer['role'] == 'assistant' else 'ðŸ§‘').write(answer["content"])

        # input area
        button_col, input_col = st.columns([1, 2])
        button_col.button('New chat', on_click=reset_chat)
        query = input_col.chat_input(key="input", placeholder='Enter your prompt')

        if query:
            # reading the user prompt
            st.session_state.messages.append({"role": "user", "content": query})
            st.session_state.latest_query = query
            conversation.chat_message("user", avatar='ðŸ§‘').write(query)

            # generating code to solve the query
            # code = code_gen_expert(base_prompt + prompt)
            code = code_gen_expert(query)
            answer = "The answer to the query has been visualized in the map output"
            
            # displaying the answer and generated code, saving it
            st.session_state.generated_code.append({'content': code}) # put generated code here
            st.session_state.messages.append({"role": "assistant", "content": answer}) # put generated answer here
            conversation.chat_message("assistant", avatar='ðŸª¨').write(answer)

    with right_col:
        # map output
        st.markdown('<div style="padding-top:18px;padding-bottom:15px;">Map output</div>', unsafe_allow_html=True)
        
        # tests
        # patch_visualization_expert(patch=patch_location_expert(st.session_state.latest_query))
        # patch_visualization_expert(patch=point_location_expert(st.session_state.latest_query))
        # patch_visualization_expert(patch=precipitation_expert(point_location_expert(st.session_state.latest_query)))
        # patch_visualization_expert(
        #     patch=threshold_expert(
        #         precipitation_expert(
        #             point_location_expert(
        #                 st.session_state.latest_query
        #             )
        #         ),
        #         threshold=0.6
        #     )
        # )
        # patch_visualization_expert(patch=air_quality_expert(patch_location_expert(st.session_state.latest_query), parameter='us-epa-index'))
        # patch_visualization_expert(patch=threshold_expert(air_quality_expert(patch_location_expert(st.session_state.latest_query)), threshold=0.5, mode='greater'))
        # patch_visualization_expert(patch=air_quality_expert(point_location_expert(st.session_state.latest_query), mode='point')[1])
        # patch_visualization_expert(patch=precipitation_expert(patch_location_expert(st.session_state.latest_query)))
        # patch_visualization_expert(patch=humidity_expert(patch_location_expert(st.session_state.latest_query))) # todo inferring the mode automatically
        # patch_visualization_expert(patch=elevation_expert(patch_location_expert(st.session_state.latest_query))) # todo inferring the mode automatically
        # 
        # patch = patch_location_expert(st.session_state.latest_query)
        # patch_visualization_expert(
        #     patch=intersection_expert(
        #         patch1=threshold_expert(humidity_expert(patch), 0.4),
        #         patch2=threshold_expert(precipitation_expert(patch), 0.1),
        #         mode='raster'
        #     )
        # )
        # patch_visualization_expert(patch=temperature_expert(patch_location_expert(st.session_state.latest_query))) # todo inferring the mode automatically
        exec(st.session_state.generated_code[-1]['content']) # running mock code from backend


        # generated code
        st.markdown("Generated code")
        st.markdown(
            f"""```python
            {st.session_state.generated_code[-1]['content']}
            """
        )


if __name__ == "__main__":
    main()
